{"version":3,"sources":["contexts/ThemeContext.js","components/SubTodo.js","components/Todo.js","components/AddTodo.js","components/ThemeToggle.js","App.js","serviceWorker.js","index.js"],"names":["ThemeContext","createContext","ThemeContextProvider","state","isLightMode","light","todoColor","subColor","bgColor","dark","toggleTheme","setState","prevState","props","document","getElementsByTagName","classList","toggle","Provider","value","this","children","Component","SubTodo","useState","content","todo","id","setTodo","useContext","theme","className","style","background","color","type","onChange","e","target","onDoubleClick","createSub","autoFocus","onClick","deleteSubTodo","Todo","subTodos","handleChange","editTodo","uuidv1","deleteId","filter","deleteTodo","map","subTodo","key","AddTodo","action","onSubmit","preventDefault","replace","addTodo","required","placeholder","ThemeToggle","context","console","log","backgroundColor","contextType","App","todos","newContent","editId","newTodos","bind","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fd127194.chunk.js","sourcesContent":["import React, {Component, createContext} from 'react'\r\n\r\nexport const ThemeContext = createContext();\r\n\r\nclass ThemeContextProvider extends Component {\r\n    state = { \r\n        isLightMode: true,\r\n        light: {todoColor:'black', subColor:'rgb(51, 51, 51)', bgColor:'white'},\r\n        dark: {todoColor:'gray', subColor:'gray', bgColor:'rgb(51, 51, 51)'}\r\n    }\r\n    toggleTheme = () => {\r\n        this.setState((prevState, props) => {\r\n            return { isLightMode: !prevState.isLightMode}\r\n        })\r\n        document.getElementsByTagName('body')[0].classList.toggle('darkMode')\r\n    }\r\n    render() { \r\n        return ( \r\n            <ThemeContext.Provider value={{...this.state, toggleTheme: this.toggleTheme}}>\r\n                {this.props.children}\r\n            </ThemeContext.Provider>\r\n         );\r\n    }\r\n}\r\n \r\nexport default ThemeContextProvider;","import React, { useState, useContext } from 'react';\r\nimport {ThemeContext} from '../contexts/ThemeContext';\r\n\r\nconst SubTodo = (props) => {\r\n    const [todo, setTodo] = useState({\r\n        content: props.todo.content,\r\n        id: props.todo.id\r\n    })\r\n    const handleChange = (e) => {\r\n        setTodo({\r\n            content: e.target.value,\r\n            id: props.todo.id\r\n        })\r\n    }\r\n    const {isLightMode, light, dark} = useContext(ThemeContext);\r\n    const theme = isLightMode ? light : dark;\r\n    return (\r\n        <div className=\"subTodo\">\r\n            <span className=\"dragBtn\"></span>\r\n            <input style={{ background: theme.bgColor, color: theme.subColor}} type=\"text\" className=\"dos\" onChange={handleChange} onDoubleClick={props.createSub} value={todo.content} autoFocus/>\r\n            <span className=\"deleteBtn\" onClick={() => {props.deleteSubTodo(todo.id)}}>&times;</span>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default SubTodo;","import React, { useState, useContext } from 'react';\r\nimport SubTodo from './SubTodo';\r\nimport {ThemeContext} from '../contexts/ThemeContext';\r\nimport { v1 as uuidv1 } from 'uuid';\r\n\r\nconst Todo = (props) => {\r\n    const [todo, setTodo] = useState({\r\n        content: props.todo,\r\n        id: props.id,\r\n        subTodos: props.subTodos\r\n    })\r\n    const handleChange = (e) => {\r\n        props.editTodo(e.target.value, todo.id)\r\n        setTodo({\r\n            content: e.target.value,\r\n            id: props.id,\r\n            subTodos: props.subTodos\r\n        })\r\n    }\r\n    const createSub = (e) => {\r\n        const subTodos = [...todo.subTodos, {content:'', id:uuidv1()}]\r\n        setTodo({\r\n            content: props.todo,\r\n            id: props.id,\r\n            subTodos: subTodos\r\n        })\r\n    }\r\n    const deleteSubTodo = (deleteId) => {\r\n        //this does not delete the subTodo from props (i.e. from App.js state)\r\n        const subTodos = todo.subTodos.filter(todo => {\r\n            return todo.id !== deleteId\r\n        })\r\n        setTodo({\r\n            content: props.todo,\r\n            id: props.id,\r\n            subTodos: subTodos\r\n        })\r\n    }\r\n    const {isLightMode, light, dark} = useContext(ThemeContext);\r\n    const theme = isLightMode ? light : dark;\r\n    return (\r\n        <div className=\"todo\" style={{ background: theme.bgColor, color: theme.todoColor}}>\r\n            <div className=\"mainTodo\">\r\n                <span className=\"dragBtn\"></span>\r\n                <input style={{ background: theme.bgColor, color: theme.todoColor}} type=\"text\" className=\"dos\" onChange={handleChange} onDoubleClick={createSub} value={todo.content}/>\r\n                <span className=\"deleteBtn\" onClick={() => {props.deleteTodo(props.id)}}>&times;</span>\r\n            </div>\r\n            <div className=\"subTodoList\">\r\n                {todo.subTodos.map(subTodo => (\r\n                    <SubTodo \r\n                        key={subTodo.id} \r\n                        todo={subTodo}\r\n                        handleChange={handleChange}\r\n                        createSub={createSub}\r\n                        deleteSubTodo={deleteSubTodo}\r\n                    />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default Todo;","import React, { useState, useContext } from 'react';\r\nimport {ThemeContext} from '../contexts/ThemeContext';\r\nimport { v1 as uuidv1 } from 'uuid';\r\n\r\nconst AddTodo = (props) => {\r\n    const [todo, setTodo] = useState({\r\n        content: '',\r\n        id: '',\r\n        subTodos: []\r\n    })\r\n    const handleChange = (e) => {\r\n        setTodo({\r\n            content: e.target.value,\r\n            id: uuidv1(),\r\n            subTodos: []\r\n        })\r\n    }\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        //prevents todos with only whitespaces.\r\n        if(todo.content.replace(/\\s/g, '') !== '') {\r\n            props.addTodo(todo);\r\n            setTodo({\r\n                content: '',\r\n                id: '',\r\n                subTodos: []\r\n            })\r\n        }\r\n    }\r\n    const {isLightMode, light, dark} = useContext(ThemeContext);\r\n    const theme = isLightMode ? light : dark;\r\n    return (\r\n        <div className='form' style={{ background: theme.bgColor, color: theme.subColor}}>\r\n            <form action=\"\" onSubmit={handleSubmit}>\r\n                <input required style={{ background: theme.bgColor, color: theme.subColor}} type=\"text\" className=\"userInput\" placeholder=\"Add a to do\" onChange={handleChange} value={todo.content}/>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default AddTodo;","import React, { Component } from 'react';\r\nimport {ThemeContext} from '../contexts/ThemeContext';\r\n\r\nclass ThemeToggle extends Component {\r\n    static contextType = ThemeContext\r\n    render() { \r\n        const {toggleTheme, isLightMode, light, dark} = this.context\r\n        const theme = isLightMode ? light : dark;\r\n        console.log(theme)\r\n        return ( \r\n            <span id=\"themeBtn\" onClick={toggleTheme} style={{backgroundColor: theme.subColor}}></span>\r\n         );\r\n    }\r\n}\r\n \r\nexport default ThemeToggle;","import React, { Component } from 'react';\r\nimport Todo from './components/Todo';\r\nimport AddTodo from './components/AddTodo';\r\nimport ThemeContextProvider from './contexts/ThemeContext';\r\nimport ThemeToggle from './components/ThemeToggle';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      todos: [\r\n        {content: \"Implement sub-todo\", id:\"unique2\", \r\n          subTodos: [\r\n            {content: \"Like this\", id: \"unique2-1\"},\r\n            {content: \"Double click to add a sub-todo\", id: \"unique2-2\"}\r\n          ]},\r\n        {content: \"Animation for deleting (strikethorugh and fade)\", id:\"unique3\", \r\n          subTodos: [\r\n\r\n          ]},\r\n        {content: \"Drag and drop re-ordering\", id:\"unique4\", \r\n          subTodos: [\r\n\r\n          ]},\r\n      ]\r\n    }\r\n    this.deleteTodo = this.deleteTodo.bind(this)\r\n    this.addTodo = this.addTodo.bind(this)\r\n    this.editTodo = this.editTodo.bind(this)\r\n  }\r\n\r\n  deleteTodo = (deleteId) => {\r\n    const todos = this.state.todos.filter(todo => {\r\n      return todo.id !== deleteId\r\n    })\r\n    this.setState({\r\n      todos: todos\r\n    })\r\n  }\r\n      //may need this to update App.js state\r\n  // deleteSubTodo = (parentTodoId, subTodoId) => {\r\n  //   let todos = this.state.todos\r\n  //   let parentIndex = ''\r\n  //   let subTodos = []\r\n  //   todos.forEach(function(parentTodo, index) {\r\n  //     if(parentTodo.id === parentTodoId) {\r\n  //       parentIndex = index\r\n  //       subTodos = parentTodo.subTodos\r\n  //     }\r\n  //   })\r\n  //   subTodos = subTodos.filter(todo => {\r\n  //     return todo.id !== subTodoId\r\n  //   })\r\n  //   todos[parentIndex].subTodos = subTodos\r\n  //   console.log(todos)\r\n  //   this.setState({ \r\n  //     todos: todos\r\n  //   })\r\n  // }\r\n  addTodo = (todo) => {\r\n    let todos = [...this.state.todos, todo];\r\n    this.setState({\r\n      todos: todos\r\n    })\r\n  }\r\n      //may need this to update App.js state\r\n  // addSubTodo = (parentTodoId, subTodo) => {\r\n  //   const todos = this.state.todos\r\n  //   todos.forEach(function(parentTodo) {\r\n  //     if(parentTodo.id === parentTodoId) {\r\n  //       parentTodo.subTodos.push(subTodo)\r\n  //     }\r\n  //   })\r\n  //   this.setState({\r\n  //     todos: todos\r\n  //   })\r\n  // }\r\n  editTodo = (newContent, editId) => {\r\n    const newTodos = this.state.todos.map(todo => {\r\n      if(todo.id === editId) {\r\n        return todo = {content: newContent, id: todo.id}\r\n      } else {\r\n        return todo\r\n      }\r\n    })\r\n    this.setState({\r\n      todos: newTodos\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"todoApp\">\r\n        <ThemeContextProvider>\r\n        <h1>To dos</h1>\r\n        <ThemeToggle/>\r\n        <div className=\"container\">\r\n          {this.state.todos.length ? (\r\n            this.state.todos.map(todo => (\r\n              <Todo key={todo.id} \r\n                    todo={todo.content} \r\n                    id={todo.id} \r\n                    subTodos={todo.subTodos}\r\n                    deleteTodo={this.deleteTodo} \r\n                    editTodo={this.editTodo}\r\n              />\r\n            ))\r\n          ) : (\r\n            <div className='todo center'>/ / /</div>\r\n          )}\r\n        </div>\r\n        <AddTodo addTodo={this.addTodo}/>\r\n        </ThemeContextProvider>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}