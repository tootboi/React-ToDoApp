{"version":3,"sources":["SubTodo.js","Todo.js","AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["SubTodo","state","content","props","todo","id","handleChange","e","setState","target","value","className","type","onChange","this","onDoubleClick","createSub","autoFocus","onClick","deleteSubTodo","Component","EditTodo","subTodos","editTodo","Date","now","deleteId","filter","deleteTodo","map","key","AddTodo","handleSubmit","preventDefault","replace","addTodo","action","onSubmit","placeholder","App","todos","newContent","editId","newTodos","bind","length","Todo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bb3061a1.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass SubTodo extends Component {\r\n    state = {\r\n        content: this.props.todo.content,\r\n        id: this.props.todo.id\r\n    }\r\n    //this does not update state of props (Todo.js state) or App.js state\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            content: e.target.value\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"subTodo\">\r\n                <span className=\"dragBtn\"></span>\r\n                <input type=\"text\" className=\"dos\" onChange={this.handleChange} onDoubleClick={this.props.createSub} value={this.state.content} autoFocus/>\r\n                <span className=\"deleteBtn\" onClick={() => {this.props.deleteSubTodo(this.state.id)}}>&times;</span>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SubTodo;","import React, { Component } from 'react';\r\nimport SubTodo from './SubTodo';\r\n\r\nclass EditTodo extends Component {\r\n    state = {\r\n        content: this.props.todo,\r\n        id: this.props.id,\r\n        subTodos: this.props.subTodos\r\n    }\r\n    handleChange = (e) => {\r\n        this.props.editTodo(e.target.value, this.state.id)\r\n        this.setState({\r\n            content: e.target.value\r\n        })\r\n    }\r\n    createSub = (e) => {\r\n        const subTodos = [...this.state.subTodos, {content:'', id:Date.now()}]\r\n        this.setState({\r\n            subTodos: subTodos\r\n        })\r\n    }\r\n    deleteSubTodo = (deleteId) => {\r\n        //this does not delete the subTodo from props (i.e. from App.js state)\r\n        const subTodos = this.state.subTodos.filter(todo => {\r\n            return todo.id !== deleteId\r\n        })\r\n        this.setState({\r\n            subTodos: subTodos\r\n        })\r\n      }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"todo\">\r\n                <div className=\"mainTodo\">\r\n                    <span className=\"dragBtn\"></span>\r\n                    <input type=\"text\" className=\"dos\" onChange={this.handleChange} onDoubleClick={this.createSub} value={this.state.content}/>\r\n                    <span className=\"deleteBtn\" onClick={() => {this.props.deleteTodo(this.props.id)}}>&times;</span>\r\n                </div>\r\n                <div className=\"subTodoList\">\r\n                    {this.state.subTodos.map(todo => (\r\n                        <SubTodo \r\n                            key={todo.id} \r\n                            todo={todo}\r\n                            handleChange={this.handleChange}\r\n                            createSub={this.createSub}\r\n                            deleteSubTodo={this.deleteSubTodo}\r\n                        />\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EditTodo;","import React, { Component } from 'react';\r\n\r\nclass AddTodo extends Component {\r\n    state = {\r\n        content: '',\r\n        id: '',\r\n        subTodos: []\r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            content: e.target.value,\r\n            id: Date.now()\r\n        })\r\n    }\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if(this.state.content.replace(/\\s/g, '') !== '') {\r\n            this.props.addTodo(this.state);\r\n            this.setState({\r\n            content: ''\r\n        })\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className='form'>\r\n                <form action=\"\" onSubmit={this.handleSubmit}>\r\n                    <input type=\"text\" className=\"userInput\" placeholder=\"Add a to do\" onChange={this.handleChange} value={this.state.content}/>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddTodo;","import React, { Component } from 'react';\r\nimport Todo from './Todo';\r\nimport AddTodo from './AddTodo';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      todos: [\r\n        {content: \"Implement sub-todo\", id:\"unique2\", \r\n          subTodos: [\r\n            {content: \"Like this\", id: \"unique2-1\"},\r\n            {content: \"And this\", id: \"unique2-2\"}\r\n          ]},\r\n        {content: \"Animation for deleting (strikethorugh and fade)\", id:\"unique3\", \r\n          subTodos: [\r\n\r\n          ]},\r\n        {content: \"Drag and drop re-ordering\", id:\"unique4\", \r\n          subTodos: [\r\n\r\n          ]},\r\n      ]\r\n    }\r\n    this.deleteTodo = this.deleteTodo.bind(this)\r\n    this.addTodo = this.addTodo.bind(this)\r\n    this.editTodo = this.editTodo.bind(this)\r\n  }\r\n\r\n  deleteTodo = (deleteId) => {\r\n    const todos = this.state.todos.filter(todo => {\r\n      return todo.id !== deleteId\r\n    })\r\n    this.setState({\r\n      todos: todos\r\n    })\r\n  }\r\n      //may need this to update App.js state\r\n  // deleteSubTodo = (parentTodoId, subTodoId) => {\r\n  //   let todos = this.state.todos\r\n  //   let parentIndex = ''\r\n  //   let subTodos = []\r\n  //   todos.forEach(function(parentTodo, index) {\r\n  //     if(parentTodo.id === parentTodoId) {\r\n  //       parentIndex = index\r\n  //       subTodos = parentTodo.subTodos\r\n  //     }\r\n  //   })\r\n  //   subTodos = subTodos.filter(todo => {\r\n  //     return todo.id !== subTodoId\r\n  //   })\r\n  //   todos[parentIndex].subTodos = subTodos\r\n  //   console.log(todos)\r\n  //   this.setState({ \r\n  //     todos: todos\r\n  //   })\r\n  // }\r\n  addTodo = (todo) => {\r\n    let todos = [...this.state.todos, todo];\r\n    this.setState({\r\n      todos: todos\r\n    })\r\n  }\r\n      //may need this to update App.js state\r\n  // addSubTodo = (parentTodoId, subTodo) => {\r\n  //   const todos = this.state.todos\r\n  //   todos.forEach(function(parentTodo) {\r\n  //     if(parentTodo.id === parentTodoId) {\r\n  //       parentTodo.subTodos.push(subTodo)\r\n  //     }\r\n  //   })\r\n  //   this.setState({\r\n  //     todos: todos\r\n  //   })\r\n  // }\r\n  editTodo = (newContent, editId) => {\r\n    const newTodos = this.state.todos.map(todo => {\r\n      if(todo.id === editId) {\r\n        return todo = {content: newContent, id: todo.id}\r\n      } else {\r\n        return todo\r\n      }\r\n    })\r\n    this.setState({\r\n      todos: newTodos\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"todoApp\">\r\n        <h1>To dos</h1>\r\n        <div className=\"container\">\r\n          {this.state.todos.length ? (\r\n            this.state.todos.map(todo => (\r\n              <Todo key={todo.id} \r\n                    todo={todo.content} \r\n                    id={todo.id} \r\n                    subTodos={todo.subTodos}\r\n                    deleteTodo={this.deleteTodo} \r\n                    editTodo={this.editTodo}\r\n              />\r\n            ))\r\n          ) : (\r\n            <div className='todo center'>/ / /</div>\r\n          )}\r\n        </div>\r\n        <AddTodo addTodo={this.addTodo}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}